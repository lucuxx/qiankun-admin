{"remainingRequest":"/Users/liuxiang/Desktop/typescript-vue-demo/node_modules/thread-loader/dist/cjs.js!/Users/liuxiang/Desktop/typescript-vue-demo/node_modules/babel-loader/lib/index.js!/Users/liuxiang/Desktop/typescript-vue-demo/node_modules/ts-loader/index.js??ref--13-3!/Users/liuxiang/Desktop/typescript-vue-demo/src/store/index.ts","dependencies":[{"path":"/Users/liuxiang/Desktop/typescript-vue-demo/src/store/index.ts","mtime":1562318109382},{"path":"/Users/liuxiang/Desktop/typescript-vue-demo/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/liuxiang/Desktop/typescript-vue-demo/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/liuxiang/Desktop/typescript-vue-demo/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/liuxiang/Desktop/typescript-vue-demo/node_modules/ts-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import Vue from 'vue';\nimport vuex from 'vuex';\nimport user from \"./modules/user\";\nVue.use(vuex);\nexport default new vuex.Store({\n  // 由于使用单一状态树，应用的所有状态会集中到一个比较大的对象。当应用变得非常复杂时，store 对象就有可能变得相当臃肿。\n  // 为了解决以上问题，Vuex 允许我们将 store 分割成模块（module）。\n  // 每个模块拥有自己的 state、mutation、action、getter、甚至是嵌套子模块——从上至下进行同样方式的分割：\n  modules: {\n    user: user\n  },\n  getters: {\n    // data: state => state.data.data,\n    user: function user(state) {\n      return state.user.user;\n    }\n  }\n});",{"version":3,"sources":["/Users/liuxiang/Desktop/typescript-vue-demo/src/store/index.ts"],"names":[],"mappings":"AAAA,OAAO,GAAP,MAAgB,KAAhB;AACA,OAAO,IAAP,MAAiB,MAAjB;AACA,OAAO,IAAP;AAGA,GAAG,CAAC,GAAJ,CAAQ,IAAR;AAEA,eAAe,IAAI,IAAI,CAAC,KAAT,CAAe;AAC9B;AACA;AACA;AACI,EAAA,OAAO,EAAE;AACL,IAAA,IAAI,EAAJ;AADK,GAJiB;AAO1B,EAAA,OAAO,EAAE;AACL;AACA,IAAA,IAAI,EAAE,cAAC,KAAD;AAAA,aAAqB,KAAK,CAAC,IAAN,CAAW,IAAhC;AAAA;AAFD;AAPiB,CAAf,CAAf","sourcesContent":["import Vue from 'vue';\nimport vuex from 'vuex';\nimport user from './modules/user';\n\n\nVue.use(vuex);\n\nexport default new vuex.Store({\n// 由于使用单一状态树，应用的所有状态会集中到一个比较大的对象。当应用变得非常复杂时，store 对象就有可能变得相当臃肿。\n// 为了解决以上问题，Vuex 允许我们将 store 分割成模块（module）。\n// 每个模块拥有自己的 state、mutation、action、getter、甚至是嵌套子模块——从上至下进行同样方式的分割：\n    modules: {\n        user,\n    },\n    getters: {\n        // data: state => state.data.data,\n        user: (state: any): any => state.user.user,\n        // modular: state => state.data.data[0],\n        // function:state => state.data.data[1],\n        // shoppingData: state => state.data.shoppingData.data.productList,\n    },\n});\n"],"sourceRoot":""}]}