{"remainingRequest":"/Users/liuxiang/Desktop/lxx/vue-my-blob-server/node_modules/babel-loader/lib/index.js!/Users/liuxiang/Desktop/lxx/vue-my-blob-server/node_modules/ts-loader/index.js??ref--13-2!/Users/liuxiang/Desktop/lxx/vue-my-blob-server/src/store/modules/user.ts","dependencies":[{"path":"/Users/liuxiang/Desktop/lxx/vue-my-blob-server/src/store/modules/user.ts","mtime":1562315321978},{"path":"/Users/liuxiang/Desktop/lxx/vue-my-blob-server/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/liuxiang/Desktop/lxx/vue-my-blob-server/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/liuxiang/Desktop/lxx/vue-my-blob-server/node_modules/ts-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["var _mutations;\n\n/* 引入常量文件 */\nimport * as Mutation from \"../mutations\"; // user数据源\n\nvar state = {\n  user: {}\n}; // mutations更改设置state；Mutation 必须是同步函数；\n\nvar mutations = (_mutations = {}, _mutations[Mutation.SET_USER_INFO] = function (state, user) {\n  state.user = user;\n}, _mutations);\n/* Action 类似于 mutation，不同在于： */\n// Action 提交的是 mutation，而不是直接变更状态。\n// Action 可以包含任意异步操作。\n\nvar actions = {\n  // Action 函数接受一个与 store 实例具有相同方法和属性的 context 对象，因此可以调用 context.commit 提交一个 mutation，\n\n  /* 使用es6的参数结构来代替context简化代码 */\n  setUserInfo: function setUserInfo(_ref, user) {\n    var commit = _ref.commit;\n    commit(Mutation.SET_USER_INFO, user);\n  }\n};\nexport default {\n  state: state,\n  mutations: mutations,\n  actions: actions\n};",{"version":3,"sources":["/Users/liuxiang/Desktop/lxx/vue-my-blob-server/src/store/modules/user.ts"],"names":[],"mappings":";;AAAA;AACA,OAAO,KAAK,QAAZ,qB,CAEA;;AACA,IAAM,KAAK,GAAG;AACV,EAAA,IAAI,EAAE;AADI,CAAd,C,CAIA;;AACA,IAAM,SAAS,gCAKV,QAAQ,CAAC,aALC,IAKe,UAAC,KAAD,EAAa,IAAb,EAA0B;AAChD,EAAA,KAAK,CAAC,IAAN,GAAa,IAAb;AACH,CAPU,aAAf;AAUA;AACA;AACA;;AACA,IAAM,OAAO,GAAG;AACZ;;AAEA;AACA,EAAA,WAAW,EAAE,2BAAgB,IAAhB,EAA6B;AAAA,QAA3B,MAA2B,QAA3B,MAA2B;AACtC,IAAA,MAAM,CAAC,QAAQ,CAAC,aAAV,EAAyB,IAAzB,CAAN;AACH;AANW,CAAhB;AAUA,eAAe;AACX,EAAA,KAAK,EAAL,KADW;AAEX,EAAA,SAAS,EAAT,SAFW;AAGX,EAAA,OAAO,EAAP;AAHW,CAAf","sourcesContent":["/* 引入常量文件 */\nimport * as Mutation from '../mutations';\n\n// user数据源\nconst state = {\n    user: {},\n};\n\n// mutations更改设置state；Mutation 必须是同步函数；\nconst mutations = {\n    /* 每个 mutation 都有一个事件类型 (type) 和 一个 回调函数 (handler) */\n    // 这个回调函数就是我们实际进行状态更改的地方，并且它会接受 state 作为第一个参数；第二个参数为更改数据所需要传的参数\n\n    /* 使用常量替代 Mutation 事件类型好处方便多人协作阅读理解 */\n    [Mutation.SET_USER_INFO]: (state: any, user: any) => {\n        state.user = user;\n    },\n};\n\n/* Action 类似于 mutation，不同在于： */\n// Action 提交的是 mutation，而不是直接变更状态。\n// Action 可以包含任意异步操作。\nconst actions = {\n    // Action 函数接受一个与 store 实例具有相同方法和属性的 context 对象，因此可以调用 context.commit 提交一个 mutation，\n\n    /* 使用es6的参数结构来代替context简化代码 */\n    setUserInfo: ({commit}: any, user: any) => {\n        commit(Mutation.SET_USER_INFO, user);\n    },\n};\n\n\nexport default {\n    state,\n    mutations,\n    actions,\n};\n"],"sourceRoot":""}]}